/* 
The Stack
Will stack from top to bottom
NB: Needs a intermediate container
*/

.stack {
  --space: 1.6rem;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--space);
}

/* 
The Box
premade box
*/

.box {
  padding: var(--size-500);
  border: var(--border-thin) solid;
  --color-light: var(--color-background);
  --color-dark: var(--color-text);
  color: var(--color-dark);
  background-color: var(--color-light);
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

/* 
The Center
Horizontally center en element
 */

.center {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  max-width: var(--measure);
}

/* 
The Cluster
Put element in an inline manner
NB: Needs a intermediate container

*/

.cluster {
  --space: var(--size-500);
  overflow: hidden;
}

.cluster > * {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  margin: calc(var(--space) / 2 * -1);
}

.cluster > * > * {
  margin: calc(var(--space) / 2);
}

.cluster.cluster--right > * {
  justify-content: flex-end;
}

/* 
The sidebar
Will put content in a sidebar matter
*/

.with-sidebar {
  overflow: hidden;
}

.with-sidebar > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--size-500) / 2 * -1);
}

.with-sidebar > * > * {
  margin: calc(var(--size-500) / 2);
  flex-grow: 1;
}

.with-sidebar > * > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(55% - var(--size-500));
}

.with-sidebar--right {
  overflow: hidden;
}

.with-sidebar--right > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--size-500) / 2 * -1);
}

.with-sidebar--right > * > * {
  margin: calc(var(--size-500) / 2);
  flex-grow: 1;
}

.with-sidebar--right > * > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: calc(55% - var(--size-500));
}

/* 
The switcher
If cannot be displayed side by side, switch to top to bottom layout
NB: Needs a intermediate container
*/

.switcher > * {
  display: flex;
  flex-wrap: wrap;
  margin: calc((var(--size-500) / 2) * -1);
}

.switcher > * > * {
  flex-grow: 1;
  flex-basis: calc((var(--measure) - (100% - var(--size-500))) * 999);
  margin: calc(var(--size-500) / 2);
}

.switcher > * > :nth-last-child(n + 5),
.switcher > * > :nth-last-child(n + 5) ~ * {
  flex-basis: 100%;
}

/* 
The cover 
Will be always 100vh, cool for page cover
*/

.cover {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: var(--size-500);
}

.cover > * {
  margin-top: var(--measure);
  margin-bottom: var(--measure);
}

.cover > :first-child:not(.centered) {
  margin-top: 0;
}

.cover > :last-child:not(.centered) {
  margin-bottom: 0;
}

.cover > .centered {
  margin-top: auto;
  margin-bottom: auto;
}

/*  
The Grid
Elements will wrap when less than 12rem
*/

.grid {
  display: grid;
  grid-gap: var(--size-500);
}

@supports (width: calc(min(12rem, 100%))) {
  .grid {
    grid-template-columns: #{"repeat(auto-fit, minmax(min(12rem, 100%), 1fr))"};
  }
}

/* 
The frame
Makes a fixed ratio container, perfect for img
*/

.frame {
  --h: 9;
  --w: 16;
  padding-bottom: calc(var(--h) / var(--w) * 100%);
  position: relative;
}

.frame > * {
  overflow: hidden;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame > img,
.frame > video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* 
The Reel
Provides a horizontal scroll context
*/

.reel {
  display: flex;
  height: auto;
  overflow-x: auto;
  overflow-y: hidden;
  scrollbar-color: var(--white) var(--black);
}

.reel::-webkit-scrollbar {
  height: 1rem;
}

.reel::-webkit-scrollbar-track {
  background-color: var(--color-text);
}

.reel::-webkit-scrollbar-thumb {
  background-color: var(--color-text);
  background-image: linear-gradient(
    var(--color-text) 0,
    var(--color-text) 0.25rem,
    var(--color-background) 0.25rem,
    var(--color-background) 0.75rem,
    var(--color-text) 0.75rem
  );
}

.reel > * {
  flex: 0 0 auto;
}

.reel > img {
  height: 100%;
  flex-basis: auto;
  width: auto;
}

.reel > * + * {
  margin-left: var(--size-500);
}

.reel.overflowing {
  padding-bottom: var(--size-500);
}

/* 
The Imposter
Will ignore flow and be centered, like a modal
*/

.imposter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.imposter.contain {
  --margin: 0px;
  overflow: auto;
  max-width: calc(100% - (var(--margin) * 2));
  max-height: calc(100% - (var(--margin) * 2));
}

/* 
The Icon
Icon size helper
*/

.icon {
  width: 0.75em;
  width: 1cap;
  height: 0.75em;
  height: 1cap;
}

.with-icon {
  display: inline-flex;
  align-items: baseline;
}

.with-icon .icon {
  margin-inline-end: 1rem;
}
